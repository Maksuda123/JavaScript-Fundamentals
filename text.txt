//varible
console.log('Hello World');

var fullName = 'Mili Akter';
console.log(fullName);
var age = 10;
var phone = true;
console.log(phone);
var job;



//Array
const car = [one, two, three];
const car = [
    'one',
    'two'
]

let x = car[0];




// //Array Literal
const cars = ['Mango', 'Apple', 'Banana'];
console.log(cars[1]);

// // //Using keyword new
const cars = new Array('Mango', 'Apple', 'Banana');
console.log(cars);

// // //Array Properties and Methods
cars.length
cars.sort()


// //property Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
Total = fruits.length;  // Returns 4
console.log(Total);


// //Looping Array Elements
const fruits = ['Banana', 'Apple', 'Orange'];
let fLen = fruits.length;

let text = '<ul>';
for (let i = 0; i < fLen; i++) {
    text += '<li>' + fruits[i] + '</li>';
}
text += '</ul>';


document.getElementById("demo").innerHTML = text;









//Var, Let, Const

if(true){
    var varVariable = "This is Var";
    var varVariable = "This is Apple";
    console.log(varVariable);
}




if(true){
    let letVariable = "Tis is let";
    letVariable = "Tis is Mango";
    console.log(letVariable);
}

if(true){
    const constVariable = "This is const";
    const constVariable = "This is const";
    console.log(constVariable);
}





// //variable type coercion or conversion
// var firstName = 'Joly';
// var age = 30;
// console.log(firstName, age);


// //variable mutation
// var firstName = 'Joly';
//  var firstName = 100;

//   console.log(firstName);


// //js operator precedince
// var now = 2021;
// var yearJoly = 1990;
// var fullAge = 30;

// var isFullAge = (now - yearJoly) > fullAge;// 31>30
// console.log(typeof now);


// console.log('A' > 'a');










// comparison Operator
// Arithmetic operator
// Assignment Operator
// Logical operator

// comparison Operator ==, ===, !=, <,>
var x = 5;
var result = (x > 10);
console.log(result);

// Arithmetic operator +, -, *, /
var x = 5;
console.log(y = x+2);

// Assignment Operator
var x = 15;
var y = 20;
console.log(x+=y);

// Logical operator
var x =20;
var y = 30;
var result = (x<y || x==y);
console.log(result);



// let theNumber = Number(prompt('Pick a number'));
// console.log('Your number is the square root of ' + theNumber * theNumber);

let sentence = 'Sectary birds speciaize in stompin';
let word = sentence.split( " ");
console.log(word);

console.log(word.join(' '));









// JavaScript problem solve

//1
var johnTeam = (140 + 120 + 103) / 3;
var mikeTeam = (119 + 94 + 123) / 3;
console.log(johnTeam, mikeTeam);


//2 & 3
if( johnTeam > mikeTeam) {
    console.log('John team wins with ' + johnTeam + ' points');
}
else if (mikeTeam > johnTeam) {
    console.log('Mike team wins with ' + mikeTeam + ' points');
}
else {
    console.log('There scores are same');
}





















//4
var johnTeam = (89 + 120 + 103) / 3;
var mikeTeam = (119 + 94 + 123) / 3;
var maryTeam = (97 + 134 + 105) / 3;
console.log(johnTeam, mikeTeam, maryTeam);

if (johnTeam > mikeTeam && johnTeam > maryTeam){
    console.log('john team wins ' + johnTeam + ' points'); 
}
else if (mikeTeam > johnTeam && mikeTeam > maryTeam){
    console.log('Mike team wins ' + mikeTeam + ' points'); 
}
else if (maryTeam > johnTeam && maryTeam > mikeTeam) {
    console.log('Mary team wins with ' + maryTeam + ' points')
}
else {
    console.log('There score is same');
}















const myCalculator = function (bill) {
    var percentages;

    if (bill < 50) {
        percentages = .2;
    }
    else if (bill >= 50 && bill < 200) {
        percentages = 15 / 100;
    }
    else {
        percentages = .1;
    }

    return percentages * bill;
}

var bills = [124, 48, 268];
var tips = [
    myCalculator(bills[0]),
    myCalculator(bills[1]),
    myCalculator(bills[2])];


var finalValues = [
    bills[0] + tips[0],
    bills[1] + tips[1],
    bills[2] + tips[2],

];
console.log(tips, finalValues);


var mila = {
    firstName: 'mila',
    LastName: 'mili',
    family: ['jon', 'mark']

}

console.log(mila.firstName);
console.log(mila['LastName']);
mila['family'] = true;
console.log(mila)


var john = {
    firstName: 'John',
    lastName: 'smit',
    birth: 1990,
    calAge: function(){
        this.age = 2012 - this.birth;
    }
};
john.calAge();
console.log(john);
console.log(john.calAge(1290));

//code challange
const john = {
    johnfullName: 'John smit',
    mass: 123,
    height: 1.2,
    calBMI: function() {
        this.bmi = (this.mass / (this.height * this.height));
         return this.bmi;
    }
}
const mark = {
    markfullName: 'mark smit',
    mass: 13,
    height: 1.9,
    calBMI: function() {
        this.bmi = (this.mass / (this.height * this.height));
         return this.bmi;
    }
}
// mark.calBMI();
// john.calBMI();
// console.log(john, mark);

if ( john.calBMI() > mark.calBMI()){
    console.log(john.johnfullName + ' bmi high' + john.bmi);

}else if(mark.bmi > mark.bmi){
    console.log(mark.markfullName + ' bmi high' + mark.bmi);

}else{
    console.log('both are same');
}


var john = ['sfgg','dfg','dfsgg'];
for(var i = 0; i<3; i++ ){
    console.log(john);
}


var john = {
    firstName: 'john',
   bills: [124, 48, 268, 180],
   calTips: function(){
       this.tips = [];
       this.finlValues = [];
       
   
       for (var i =0; i < this.bills.length; i++);
       {
        var percentage;
        var bill =this.bills[i];
        if(bill < 50){
            percentage = 20/100;
        }else if (bill >= 50 && bill < 200){
            percentage = 15/100;
        }else{
            percentage = 10/100;
        }
        this.tips[i] = bill * percentage;
        this.finlValues[i] = bill + bill * percentage;
        
       }
   } 
}





var mark = {
    firstName: 'marksd',
    bills: [77, 375, 110, 45],
    calTips: function(){
        this.tips = [];
        this.finlValues = [];
        
    
        for (var i =0; i < this.bills.length; i++);
        {
         var percentage;
         var bill =this.bills[i];
         if(bill < 100){
             percentage = 20/100;
         }else if (bill >= 100 && bill < 300){
             percentage = 10/100;
         }else{
             percentage = 25/100;
         }
         this.tips[i] = bill * percentage;
         this.finlValues[i] = bill + bill * percentage;
         
        }
    } 
 }


function calAverage(tips){
    var sum = 0;
    for(var i = 0; i<tips.length; i++){
        sum = sum + tips[i];
    }
    return sum / tips.length;

}

john.calTips();
mark.calTips();

john.average = calAverage(john.tips);
mark.average = calAverage(mark.tips);
console.log(john, mark);

if (john.average > mark.average) {
    console.log(firstName + 'john family pays higher tips'+ john.average);
}else if (mark.average > john.average){
    console.log('mark family pays higher');
}



















//prototype object

//onject
let person = {};

person.name = "Mila";
person.age = 30

person.eat = function () {
    console.log(`person is eating`);
};
person.seep = function () {
    console.log(`person is sleeping`);
};


//return object from function

let p = function Person(name, age) {
    let person = {};

    person.name = name;
    person.age = age;

    person.eat = function () {
        console.log(`person is eating`);
    };
    person.seep = function () {
        console.log(`person is sleeping`);
    };
    return person;
}
// console.log(p);
console.dir(p);






 function Person(name, age) {
    let person = {};

    person.name = name;
    person.age = age;

    //(method)
    person.eat = function () {
        console.log(`person is eating`);
    };
    person.seep = function () {
        console.log(`person is sleeping`);
    };
    return person;
}

const mili = Person("Mili", 35);
const mili = Person("Mili", 65);






//object count optimization


const personMethod = {
    //(property object er)
    //egula method
    eat() {
        console.log(`person is eating`);
    },
    sleep() {
        console.log(`person is sleeping`);
    },
    play(){
        console.log(`person is play`);
    }
}

function Person(name, age) {
    let person = {};

    person.name = name;
    person.age = age;

    person.eat = personMethod.eat;
    person.seep = personMethod.sleep;
    person.play = personMethod.play;
    return person;
}

const mili = Person("Mili", 35);
const mili = Person("Mili", 65);





///object create()



//object
const captain = {
    name: "mashrafi",
    age: 23,
    country: 'bd',
}
//object
const player = Object.create(captain);
console.log(player.name);//run this for prototype





//prototype introduction
const personMethod = {
    //(property object er)
    //egula method
    eat() {
        console.log(`person is eating`);
    },
    sleep() {
        console.log(`person is sleeping`);
    },
    play(){
        console.log(`person is play`);
    }
}

function Person(name, age) {
    let person = Object.create(personMethod);
    console.log(person);

    person.name = name;
    person.age = age;
    return person;
}

const sakib = Person("Sakib", 35);
sakib.play();
const mili = Person("Mili", 65);










function test() {}
console.log(test.prototype);
console.dir(test);









//constrator function


 function Person(name, age) {
        let person = Object.create(Person.prototype);
        console.log(person);
    
        person.name = name;
        person.age = age;
        return person;
    }
    //C.F er prototype er modda amra kisu method add korci ai khane
Person.prototype = {
    eat() {
        console.log(`person is eating`);
    },
    sleep() {
        console.log(`person is sleeping`);
    },
    play() {
        console.log(`person is play`);
    }
}
const sakib = Person("Sakib", 35);
sakib.play();
const mili = Person("Mili", 65);














//new and this keyword
 function Person(name, age) {
        // let this = Object.create(PersonWithNew.prototype); 
        console.log(person);
    
        this.name = name;
        this.age = age;
        // return this;
    }
    //C.F er prototype er modda amra kisu method add korci ai khane
Person.prototype = {
    eat() {
        console.log(`person is eating`);
    },
    sleep() {
        console.log(`person is sleeping`);
    },
    play() {
        console.log(`person is play`);
    }
}
const sakib = new Person("Sakib", 35);
sakib.play();
const mili = new Person("Mili", 65);





//class in js (class conversion)
class Person {
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    eat(){
        console.log('Person is eating');
    }
    sleep(){
        console.log('Person is sleeping');
    }
}

const sakib = new Person( 'Sakib', 23);
sakib.eat();

// prototype Array
let person = [];//both same

let person = new Array();
person.push('sakib');
// console.log(person);
console.log(Array.prototype)










//what is functional programming? ekta ba akadik function ke parameter hishaba er ekta function a pathte parben or ekta function theke er ekta function eturn korte parben
//js a function e holo object, special type of object
//console.dir() details dakhiya dai
// js a function k variable a assign korte parbo, parameter hishaba pathate parbo, function theke er ekta function return o korte parbo
//first class function
function hello() {
    console.log("Hello world");
}
hello();
//prove function is a abject
hello.language = "javaScript";//function k object er moto property dilam //but aita amra korbo na aita bad object create korbo property add korte chile
console.log(hello.language);




//what is Higher order function? jeta onno ekta function er upor kaj kore & parameter hishaba er ekta function k nibe, function theke er ekta function return korbe
function hello() {//higher order function
    return function() {
        console.log("Hello world");
    }
}
hello()();//aber call ta na korle output ashto na




//Example1 without higher order function
var number = [1, 2, 3];
var result = [];// aiter modda result diya dibo tai faka ekta Array niya nilam
for(let i =0; i< number.length; i++){
    result.push(number[i] * 2);//puch build in function// [i] element gula 1, 2, 3
}
console.log(result);



//Example1 with higher order function
//Array.prototype.map() use
var number = [1, 2, 3];
var result = number.map(function(number){ //map portek ta elemet er moddo diya jai
//map ekta function nai tar parameter hishbe and shai function ta array er portek ta element k pai ekbar kore shai element ta k ami ja kushi korte parbo kore return koe dibo
return Number * 2;// (var number = [1, 2, 3];)aitar change aita

});


//Example1 wth arrow function
var number = [1, 2, 3];
var result = number.map((number) => {
    return Number * 2;   
});






//Example2 with higher order function

var playrs = [
    {
        name: 'Sakib',
        avg: 38.44,
    },
    {
        name: 'Tamim',
        avg: 23.4,
    },
    {
        name: 'Mush',
        avg: 53.55,
    },
    {
        name: 'Ique',
        avg: 33.44,
    },
];
var playersWithAvgThirtySeven = [];
for(let i = 0; i < playrs.length; i++){
    if (playrs[i].avg >=37){
        playersWithAvgThirtySeven.push(playrs[i]);
    }
}
console.log(playersWithAvgThirtySeven);
//filter , map ata main array k change kore na



//Example2 with higher order function
//Array.prototype.filter() use
var playrs = [
    {
        name: 'Sakib',
        avg: 38.44,
    },
    {
        name: 'Tamim',
        avg: 23.4,
    },
    {
        name: 'Mush',
        avg: 53.55,
    },
    {
        name: 'Ique',
        avg: 33.44,
    },
];

//filer o parameter hishaba function niyase
var playersWithAvgThirtySeven = playrs.filter((player) => player.avg >= 37 );//ek line a likle return likte hoi na
console.log(playersWithAvgThirtySeven);

//ato khon build in functio deklam map, filter




//akhon amra nijera higher order function banabo
//amra akhon map funtion nijera banbo
const languages  = ['JavaScript', 'PHP', 'c'];

//map function banasi but map name dite parbo na map js a ase
//aita higher order function karon paramiter function nisse and array return korse
function mapSumit(arr, fn) {//mapSumit to buildin na ja amta dot niya excess korte parbo na so amra para mitter hishaba pathasi
//map ki korto she paramitter hishabe array  & function nito tai ai khane o amra array & function pathasi
const newArray = [];
    for(let i = 0; i<arr.length; i++){
        newArray.push(fn(arr[i]));
    }
    return newArray;//map finaly ekta array return korto tai amra ai line a array return korsi

}

const myArray = mapSumit(languages, function(language) {
    return language.length;
});
console.log(myArray);



//uporer code tuko e without command //nijer banano higher order function

const languages = ["JavaScript", "PHP", "c"];
function mapSumit(arr, fn){
    const newArray = [];
    for(let i = 0; i <arr.length; i++){
        newArray.push(fn(arr[i]));
    }
 return newArray;
}
const myArray = mapSumit(languages, function(language){
    return language.length;
});
console.length(myArray);